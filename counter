/////////////////////////////           counter        //////////////////////////////////////



**********************************     RTL CODE     ***********************************



module counter(input[3:0]data,input load,clk,rst,output reg [3:0]out);
	always @(posedge clk)
		begin
			if(~rst)begin
				out<=4'd0;end
			else if (load)begin
				out<=data;end
			else begin
				out<=out+1'b1;end
		end
endmodule



******************************    TEST BENCH     ****************************************

module counter_tb();
	reg [3:0]data;
	reg load,clk,rst;
	wire [3:0]out;
	parameter CYCLE=10;
counter DUT(data,load,clk,rst,out);
	always 
		begin
			#(CYCLE/2);
			clk=1'b0;
			#(CYCLE/2);
			clk=1'b1;
		end
	task reset;
		begin
			@(negedge clk);
				rst=1'b0;
			@(negedge clk);
				rst=1'b1;
				
		end
	endtask
	task load1(input l,input [3:0]d);
		begin
			@(negedge clk);
			load=l;
			data=d;
		end
	endtask 
	initial
		begin
		reset;
		#100;
		load1(1'b1,4'd13);
		load1(1'b0,4'd12);
		#200;
		$finish;
	end
endmodule







