/////////////////////////////////////////////////////////////////      FIFO     /////////////////////////////////////////////////////////////////////

****************************************************************************     RTL CODE    ********************************************************************************************


module fifo (
    input clk,
    input reset,
    input wr_en,
    input rd_en,
    input [7:0] data_in,
    output reg [7:0] data_out,
    output reg empty,
    output reg full
);

    parameter DEPTH = 16;
    reg [7:0] fifo_mem [0:DEPTH-1];
    reg [3:0] rd_ptr, wr_ptr, count;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            rd_ptr <= 0;
            wr_ptr <= 0;
            count <= 0;
            empty <= 1;
            full <= 0;
        end else begin
            if (wr_en && !full) begin
                fifo_mem[wr_ptr] <= data_in;
                wr_ptr <= wr_ptr + 1'b1;
                count <= count + 1'b1;
            end
            
            if (rd_en && !empty) begin
                data_out <= fifo_mem[rd_ptr];
                rd_ptr <= rd_ptr + 1'b1;
                count <= count - 1'b1;
            end

            empty <= (count == 0);
            full <= (count == DEPTH);
        end
    end
endmodule



***************************************************************              TB  CODE          **************************************************************************

module fifo_tb;

    reg clk;
    reg reset;
    reg wr_en;
    reg rd_en;
    reg [7:0] data_in;
    wire [7:0] data_out;
    wire empty;
    wire full;

    fifo uut (
        .clk(clk),
        .rst(reset),
        .wr_en(wr_en),
        .rd_en(rd_en),
        .data(data_in),
        .out(data_out),
        .empty(empty),
        .full(full)
    );

    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end

    initial begin
        reset = 1;
        wr_en = 0;
        rd_en = 0;
        data_in = 8'b0;
        #10 reset = 0;
        
        #10 wr_en = 1;
        data_in = 8'hA1;
        
        #10 wr_en = 1;
        data_in = 8'hB2;
        
        #10 wr_en = 1;
        data_in = 8'hC3;
        
        #10 wr_en = 0;   
        
        #10 rd_en = 1; 
        
        #10 rd_en = 1;
        
        #10 rd_en = 1;
        
        #10 rd_en = 0;
        
        #10 $finish;
    end
endmodule
